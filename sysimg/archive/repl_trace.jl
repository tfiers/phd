precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{Main.var"#1#2", REPL.LineEditREPL})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.ModalInterface}, REPL.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(OhMyREPL.colorscheme!), String})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.activate_256colors)})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.check_open), Base.TTY})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle})
precompile(Tuple{typeof(Base.convert), Type{Crayons.Crayon}, Crayons.Crayon})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Tokens.exactkind), Tokenize.Tokens.Token})
precompile(Tuple{typeof(Base.:(==)), Tokenize.Tokens.Kind, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Tokens.kind), Tokenize.Tokens.Token})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.pipe_reader), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, REPL.LineEdit.TextInterface})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.TTY, Base.TTY}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.TTY, Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#11#38", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#11#38", Any, Any, Any})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Bool}}, Symbol})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:x,), Tuple{Array{Int64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(), Tuple{}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Int64, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64}}}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:bold,), Tuple{Bool}}, Type{Crayons.Crayon}})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:foreground,), Tuple{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, DataFrames.DataFrame})
precompile(Tuple{Base.var"#4#5"{DataFrames.var"#798#800"{Base.Dict{Any, String}}}, Tuple{DataType, Int64}})
precompile(Tuple{typeof(Base.get!), DataFrames.var"#799#801"{DataType, Int64}, Base.Dict{Any, String}, Type{Int64}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Int64}})
precompile(Tuple{PrettyTables.var"#_pt_text##kw", NamedTuple{(:alignment_anchor_fallback, :alignment_anchor_regex, :crop, :ellipsis_line_skip, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :reserved_display_lines, :row_label_crayon, :vcrop_mode, :vlines), Tuple{Symbol, Base.Dict{Int64, Array{Base.Regex, 1}}, Symbol, Int64, Array{Symbol, 1}, Tuple{PrettyTables.Highlighter}, Array{Int64, 1}, Bool, Int64, Crayons.Crayon, Symbol, Array{Int64, 1}}}, typeof(PrettyTables._pt_text), Base.IOContext{Base.TTY}, PrettyTables.PrintInfo})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Array{Array{String, 1}, 2}, PrettyTables.ProcessedTable, Array{Int64, 1}, PrettyTables.Display, Ref{Any}, Array{Int64, 1}, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Base.Val{:print}, Symbol})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), String})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(PrettyTables._convert_axes), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(PrettyTables._convert_axes), Array{String, 1}, Int64})
precompile(Tuple{typeof(PrettyTables._convert_axes), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(Base.isassigned), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrameColumns{DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base.getindex), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(DataFrames._pretty_tables_general_formatter), Int64, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}, Pair{Symbol, Bool}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.TTY}}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(PrettyTables._process_data_cell_text), PrettyTables.ProcessedTable, Int64, String, Int64, Int64, Int64, Int64, Crayons.Crayon, Symbol, Ref{Any}})
precompile(Tuple{typeof(Base.getproperty), PrettyTables.Highlighter, Symbol})
precompile(Tuple{typeof(PrettyTables._getdata), PrettyTables.ColumnTable})
precompile(Tuple{typeof(DataFrames._pretty_tables_highlighter_func), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#21#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#21#48", Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{REPL.var"#48#53"{REPL.REPLBackendRef}})
precompile(Tuple{Base.var"#886#887"})
